// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: generated.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Response: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case yes // = 0
  case no // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .yes
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .yes
    case 1: self = .no
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .yes: return 0
    case .no: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Response: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Response] = [
    .yes,
    .no,
  ]
}

#endif  // swift(>=4.2)

struct Thing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var price: String {
    get {return _price ?? String()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {self._price = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _price: String? = nil
}

struct ThingArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var elements: [Thing] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Person {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var firstName: String = String()

  var lastName: String = String()

  var age: Int64 {
    get {return _age ?? 0}
    set {_age = newValue}
  }
  /// Returns true if `age` has been explicitly set.
  var hasAge: Bool {return self._age != nil}
  /// Clears the value of `age`. Subsequent reads from it will return its default value.
  mutating func clearAge() {self._age = nil}

  var favoriteThings: ThingArray {
    get {return _favoriteThings ?? ThingArray()}
    set {_favoriteThings = newValue}
  }
  /// Returns true if `favoriteThings` has been explicitly set.
  var hasFavoriteThings: Bool {return self._favoriteThings != nil}
  /// Clears the value of `favoriteThings`. Subsequent reads from it will return its default value.
  mutating func clearFavoriteThings() {self._favoriteThings = nil}

  var eulaResponse: Response = .yes

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _age: Int64? = nil
  fileprivate var _favoriteThings: ThingArray? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Response: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "YES"),
    1: .same(proto: "NO"),
  ]
}

extension Thing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Thing"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "price"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._price) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._price {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Thing, rhs: Thing) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._price != rhs._price {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThingArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThingArray"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "elements"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.elements) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.elements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elements, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThingArray, rhs: ThingArray) -> Bool {
    if lhs.elements != rhs.elements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Person: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Person"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "first_name"),
    2: .standard(proto: "last_name"),
    3: .same(proto: "age"),
    4: .standard(proto: "favorite_things"),
    5: .standard(proto: "eula_response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.firstName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.lastName) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self._age) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._favoriteThings) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.eulaResponse) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 1)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 2)
    }
    if let v = self._age {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    }
    if let v = self._favoriteThings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.eulaResponse != .yes {
      try visitor.visitSingularEnumField(value: self.eulaResponse, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Person, rhs: Person) -> Bool {
    if lhs.firstName != rhs.firstName {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs._age != rhs._age {return false}
    if lhs._favoriteThings != rhs._favoriteThings {return false}
    if lhs.eulaResponse != rhs.eulaResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
